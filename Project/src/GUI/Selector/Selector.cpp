#define IM_ARRAYSIZE(_ARR)  ((int)(sizeof(_ARR)/sizeof(*_ARR)))
static const char* INPUTELEMENTFORMAT[] = {
	"DXGI_FORMAT_UNKNOWN",
	"DXGI_FORMAT_R32G32B32A32_TYPELESS",
	"DXGI_FORMAT_R32G32B32A32_FLOAT",
	"DXGI_FORMAT_R32G32B32A32_UINT",
	"DXGI_FORMAT_R32G32B32A32_SINT",
	"DXGI_FORMAT_R32G32B32_TYPELESS",
	"DXGI_FORMAT_R32G32B32_FLOAT",
	"DXGI_FORMAT_R32G32B32_UINT",
	"DXGI_FORMAT_R32G32B32_SINT",
	"DXGI_FORMAT_R16G16B16A16_TYPELESS",
	"DXGI_FORMAT_R16G16B16A16_FLOAT",
	"DXGI_FORMAT_R16G16B16A16_UNORM",
	"DXGI_FORMAT_R16G16B16A16_UINT",
	"DXGI_FORMAT_R16G16B16A16_SNORM",
	"DXGI_FORMAT_R16G16B16A16_SINT",
	"DXGI_FORMAT_R32G32_TYPELESS",
	"DXGI_FORMAT_R32G32_FLOAT",
	"DXGI_FORMAT_R32G32_UINT",
	"DXGI_FORMAT_R32G32_SINT",
	"DXGI_FORMAT_R32G8X24_TYPELESS",
	"DXGI_FORMAT_D32_FLOAT_S8X24_UINT",
	"DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS",
	"DXGI_FORMAT_X32_TYPELESS_G8X24_UINT",
	"DXGI_FORMAT_R10G10B10A2_TYPELESS",
	"DXGI_FORMAT_R10G10B10A2_UNORM",
	"DXGI_FORMAT_R10G10B10A2_UINT",
	"DXGI_FORMAT_R11G11B10_FLOAT",
	"DXGI_FORMAT_R8G8B8A8_TYPELESS",
	"DXGI_FORMAT_R8G8B8A8_UNORM",
	"DXGI_FORMAT_R8G8B8A8_UNORM_SRGB",
	"DXGI_FORMAT_R8G8B8A8_UINT",
	"DXGI_FORMAT_R8G8B8A8_SNORM",
	"DXGI_FORMAT_R8G8B8A8_SINT",
	"DXGI_FORMAT_R16G16_TYPELESS",
	"DXGI_FORMAT_R16G16_FLOAT",
	"DXGI_FORMAT_R16G16_UNORM",
	"DXGI_FORMAT_R16G16_UINT",
	"DXGI_FORMAT_R16G16_SNORM",
	"DXGI_FORMAT_R16G16_SINT",
	"DXGI_FORMAT_R32_TYPELESS",
	"DXGI_FORMAT_D32_FLOAT",
	"DXGI_FORMAT_R32_FLOAT",
	"DXGI_FORMAT_R32_UINT",
	"DXGI_FORMAT_R32_SINT",
	"DXGI_FORMAT_R24G8_TYPELESS",
	"DXGI_FORMAT_D24_UNORM_S8_UINT",
	"DXGI_FORMAT_R24_UNORM_X8_TYPELESS",
	"DXGI_FORMAT_X24_TYPELESS_G8_UINT",
	"DXGI_FORMAT_R8G8_TYPELESS",
	"DXGI_FORMAT_R8G8_UNORM",
	"DXGI_FORMAT_R8G8_UINT",
	"DXGI_FORMAT_R8G8_SNORM",
	"DXGI_FORMAT_R8G8_SINT",
	"DXGI_FORMAT_R16_TYPELESS",
	"DXGI_FORMAT_R16_FLOAT",
	"DXGI_FORMAT_D16_UNORM",
	"DXGI_FORMAT_R16_UNORM",
	"DXGI_FORMAT_R16_UINT",
	"DXGI_FORMAT_R16_SNORM",
	"DXGI_FORMAT_R16_SINT",
	"DXGI_FORMAT_R8_TYPELESS",
	"DXGI_FORMAT_R8_UNORM",
	"DXGI_FORMAT_R8_UINT",
	"DXGI_FORMAT_R8_SNORM",
	"DXGI_FORMAT_R8_SINT",
	"DXGI_FORMAT_A8_UNORM",
	"DXGI_FORMAT_R1_UNORM",
	"DXGI_FORMAT_R9G9B9E5_SHAREDEXP",
	"DXGI_FORMAT_R8G8_B8G8_UNORM",
	"DXGI_FORMAT_G8R8_G8B8_UNORM",
	"DXGI_FORMAT_BC1_TYPELESS",
	"DXGI_FORMAT_BC1_UNORM",
	"DXGI_FORMAT_BC1_UNORM_SRGB",
	"DXGI_FORMAT_BC2_TYPELESS",
	"DXGI_FORMAT_BC2_UNORM",
	"DXGI_FORMAT_BC2_UNORM_SRGB",
	"DXGI_FORMAT_BC3_TYPELESS",
	"DXGI_FORMAT_BC3_UNORM",
	"DXGI_FORMAT_BC3_UNORM_SRGB",
	"DXGI_FORMAT_BC4_TYPELESS",
	"DXGI_FORMAT_BC4_UNORM",
	"DXGI_FORMAT_BC4_SNORM",
	"DXGI_FORMAT_BC5_TYPELESS",
	"DXGI_FORMAT_BC5_UNORM",
	"DXGI_FORMAT_BC5_SNORM",
	"DXGI_FORMAT_B5G6R5_UNORM",
	"DXGI_FORMAT_B5G5R5A1_UNORM",
	"DXGI_FORMAT_B8G8R8A8_UNORM",
	"DXGI_FORMAT_B8G8R8X8_UNORM",
	"DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM",
	"DXGI_FORMAT_B8G8R8A8_TYPELESS",
	"DXGI_FORMAT_B8G8R8A8_UNORM_SRGB",
	"DXGI_FORMAT_B8G8R8X8_TYPELESS",
	"DXGI_FORMAT_B8G8R8X8_UNORM_SRGB",
	"DXGI_FORMAT_BC6H_TYPELESS",
	"DXGI_FORMAT_BC6H_UF16",
	"DXGI_FORMAT_BC6H_SF16",
	"DXGI_FORMAT_BC7_TYPELESS",
	"DXGI_FORMAT_BC7_UNORM",
	"DXGI_FORMAT_BC7_UNORM_SRGB",
	"DXGI_FORMAT_AYUV",
	"DXGI_FORMAT_Y410",
	"DXGI_FORMAT_Y416",
	"DXGI_FORMAT_NV12",
	"DXGI_FORMAT_P010",
	"DXGI_FORMAT_P016",
	"DXGI_FORMAT_420_OPAQUE",
	"DXGI_FORMAT_YUY2",
	"DXGI_FORMAT_Y210",
	"DXGI_FORMAT_Y216",
	"DXGI_FORMAT_NV11",
	"DXGI_FORMAT_AI44",
	"DXGI_FORMAT_IA44",
	"DXGI_FORMAT_P8",
	"DXGI_FORMAT_A8P8",
	"DXGI_FORMAT_B4G4R4A4_UNORM",
	"DXGI_FORMAT_P208",
	"DXGI_FORMAT_V208",
	"DXGI_FORMAT_V408",
	"DXGI_FORMAT_FORCE_UINT"
};
static const char* INPUTELEMENTCLASSIFICATION[] = {
"D3D11_INPUT_PER_VERTEX_DATA",
"D3D11_INPUT_PER_INSTANCE_DATA",
};

void GFW::GUI::Selector_INPUT_ELEMENT_DESC(GFW::Type::GFW_INPUT_ELEMENT_DESC &value) {
	ImGui::PushID((int)&value);
	ImGui::InputText("Semantic", value._SemanticName, sizeof(value._SemanticName));
	ImGui::SliderUInt("SemanticIndex", &value.SemanticIndex, 0, 4);
	int slot = value.Format;
	if (slot == 0xffffffff) {
		slot = 133;
	}
	ImGui::Combo("Format", &slot, INPUTELEMENTFORMAT, IM_ARRAYSIZE(INPUTELEMENTFORMAT));
	value.Format = (DXGI_FORMAT)slot;
	if (value.Format == 133) {
		value.Format =(DXGI_FORMAT) 0xffffffff;
	}
	ImGui::SliderUInt("Input Slot", &value.InputSlot, 0, 15);
	slot = value.InputSlotClass;
	ImGui::Combo("Input Slot Class", &slot, INPUTELEMENTCLASSIFICATION, IM_ARRAYSIZE(INPUTELEMENTCLASSIFICATION));
	value.InputSlotClass =(D3D11_INPUT_CLASSIFICATION) slot;
	if (slot) {
		ImGui::InputUInt("Instance Data Step Rate", &value.InstanceDataStepRate, 0, 99999);
	} else {
		value.InstanceDataStepRate = 0;
	}
	ImGui::IsItemHovered();
	ImGui::PopID();
}

void GFW::GUI::Selector_INPUT_ELEMENT_DESC_ARRAY(GFW::Type::GFW_INPUT_ELEMENT_DESC_ARRAY &array) {
	for (auto &v : array.value) {
		GFW::GUI::Selector_INPUT_ELEMENT_DESC(v);
	}
	if (ImGui::Button("Add Element")) {
		GFW::Type::GFW_INPUT_ELEMENT_DESC v;
		ZeroMemory(&v, sizeof(GFW::Type::GFW_INPUT_ELEMENT_DESC));
		v.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
		v.SemanticName = v._SemanticName;
		array.value.push_back(v);
	}
}

static const char*FILLMODE[] = {
	"D3D11_FILL_WIREFRAME",
	"D3D11_FILL_SOLID",
};
static const char*CULLMODE[] = {
"D3D11_CULL_NONE",
"D3D11_CULL_FRONT",
"D3D11_CULL_BACK"
};
void GFW::GUI::Selector_RASTERIZER_DESC(Type::GFW_RASTERIZER_DESC &value) {
	ImGui::PushID((int)&value);

	int select = value.FillMode-2;
	ImGui::Combo("Fill Mode", &select, FILLMODE, IM_ARRAYSIZE(FILLMODE));
	value.FillMode = (D3D11_FILL_MODE)(select + 2);

	select = value.CullMode - 1;
	ImGui::Combo("Cull Mode", &select, CULLMODE, IM_ARRAYSIZE(CULLMODE));
	value.CullMode = (D3D11_CULL_MODE)(select + 1);
	/*
	FrontCounterClockwise
三角形が前向きか後ろ向きかを決定します。このパラメーターが true の場合、三角形の頂点がレンダー ターゲット上で左回りならば三角形は前向きと見なされ、右回りならば後ろ向きと見なされます。このパラメーターが false の場合は逆になります。
DepthBias
指定のピクセルに加算する深度値です。
DepthBiasClamp
ピクセルの最大深度バイアスです。
SlopeScaledDepthBias
指定のピクセルのスロープに対するスカラです。
DepthClipEnable
距離に基づいてクリッピングを有効にします。
ScissorEnable
シザー矩形カリングを有効にします。アクティブなシザー矩形の外側のピクセルはすべてカリングされます。
MultisampleEnable
マルチサンプリングのアンチエイリアシングを有効にします。
AntialiasedLineEnable
線のアンチエイリアシングを有効にします。線を描画中で MultisampleEnable が false の場合にのみ適用されます。
*/
	ImGui::PopID();
}